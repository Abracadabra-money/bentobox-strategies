{
  "address": "0x52bdF3f9E70F3fd8302d43F501c69871AC21e73b",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "STARGATE",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT",
      "outputs": [
        {
          "internalType": "contract IBalancerVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stgBalance",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "swapToUnderlying",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x524a4ab6437ced6dffb60018a3e1c64cef81c5479276202fc230285785c9969b",
  "receipt": {
    "to": null,
    "from": "0xfB3485c2e209A5cfBDC1447674256578f1A80eE3",
    "contractAddress": "0x52bdF3f9E70F3fd8302d43F501c69871AC21e73b",
    "transactionIndex": 0,
    "gasUsed": "4766905",
    "logsBloom": "0x
    "blockHash": "0x02dbf92cb905d26793d101d08d19cfa86d9c6f4e9e6ae082bfe413485effb2d6",
    "transactionHash": "0x524a4ab6437ced6dffb60018a3e1c64cef81c5479276202fc230285785c9969b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12267817,
        "transactionHash": "0x524a4ab6437ced6dffb60018a3e1c64cef81c5479276202fc230285785c9969b",
        "address": "0x6694340fc020c5E6B96567843da2df01b2CE1eb6",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000052bdf3f9e70f3fd8302d43f501c69871ac21e73b",
          "0x000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c8"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0x02dbf92cb905d26793d101d08d19cfa86d9c6f4e9e6ae082bfe413485effb2d6"
      }
    ],
    "blockNumber": 12267817,
    "cumulativeGasUsed": "85945",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "daba586f1b061e05ad00b2b6f1c455e4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"STARGATE\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT\",\"outputs\":[{\"internalType\":\"contract IBalancerVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stgBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"swapToUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/stargate/ArbitrumStargateUsdtSwapperV1.sol\":\"ArbitrumStargateUsdtSwapperV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\nabstract contract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] -= amount;\\n        }\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n                )\\n            );\\n\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_PERMIT_SIGNATURE\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(bytes(\\\"1\\\")),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x058e0708ffdd2b04a17b96b5775d9fab8daa19d3cd37d26ce6c923679bf9cc9a\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/balancer/IBalancerVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity 0.8.7;\\r\\n\\r\\ninterface IBalancerVault {\\r\\n    enum SwapKind {\\r\\n        GIVEN_IN,\\r\\n        GIVEN_OUT\\r\\n    }\\r\\n\\r\\n    struct SingleSwap {\\r\\n        bytes32 poolId;\\r\\n        SwapKind kind;\\r\\n        address assetIn;\\r\\n        address assetOut;\\r\\n        uint256 amount;\\r\\n        bytes userData;\\r\\n    }\\r\\n\\r\\n    struct BatchSwapStep {\\r\\n        bytes32 poolId;\\r\\n        uint256 assetInIndex;\\r\\n        uint256 assetOutIndex;\\r\\n        uint256 amount;\\r\\n        bytes userData;\\r\\n    }\\r\\n\\r\\n    struct FundManagement {\\r\\n        address sender;\\r\\n        bool fromInternalBalance;\\r\\n        address payable recipient;\\r\\n        bool toInternalBalance;\\r\\n    }\\r\\n\\r\\n    function swap(\\r\\n        SingleSwap memory singleSwap,\\r\\n        FundManagement memory funds,\\r\\n        uint256 limit,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256);\\r\\n\\r\\n    function batchSwap(\\r\\n        SwapKind kind,\\r\\n        BatchSwapStep[] memory swaps,\\r\\n        address[] memory assets,\\r\\n        FundManagement memory funds,\\r\\n        int256[] memory limits,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (int256[] memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x240bdf5c3ae39caa783f4f60ec34c8d1c5e1554a864e346edde8d64d16e0dca5\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/stargate/IStargateSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\ninterface IStargateSwapper {\\r\\n    function swapToUnderlying(uint256 stgAmount, address recipient) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x544bb71e25d8d4c443e8cc0c318a2c9936ddc626fa7b868cd0fe386dcbae99da\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/stargate/ArbitrumStargateUsdtSwapperV1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\r\\nimport \\\"../../interfaces/stargate/IStargateSwapper.sol\\\";\\r\\nimport \\\"../../interfaces/balancer/IBalancerVault.sol\\\";\\r\\n\\r\\ncontract ArbitrumStargateUsdtSwapperV1 is IStargateSwapper {\\r\\n    IBalancerVault public constant VAULT = IBalancerVault(0xBA12222222228d8Ba445958a75a0704d566BF2C8);\\r\\n    address public constant USDC = 0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8;\\r\\n    address public constant USDT = 0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9;\\r\\n    ERC20 public constant STARGATE = ERC20(0x6694340fc020c5E6B96567843da2df01b2CE1eb6);\\r\\n\\r\\n    constructor() {\\r\\n        STARGATE.approve(address(VAULT), type(uint256).max);\\r\\n    }\\r\\n\\r\\n    function swapToUnderlying(uint256 stgBalance, address recipient) external override {\\r\\n        STARGATE.transferFrom(msg.sender, address(this), stgBalance);\\r\\n\\r\\n        IBalancerVault.BatchSwapStep[] memory swaps = new IBalancerVault.BatchSwapStep[](2);\\r\\n        swaps[0] = IBalancerVault.BatchSwapStep({\\r\\n            poolId: 0x3a4c6d2404b5eb14915041e01f63200a82f4a343000200000000000000000065, // STG/USDC PoolId\\r\\n            assetInIndex: 0,\\r\\n            assetOutIndex: 1,\\r\\n            amount: stgBalance,\\r\\n            userData: \\\"\\\"\\r\\n        });\\r\\n        swaps[1] = IBalancerVault.BatchSwapStep({\\r\\n            poolId: 0x1533a3278f3f9141d5f820a184ea4b017fce2382000000000000000000000016, // USDC/USDT/DAI PoolId\\r\\n            assetInIndex: 1,\\r\\n            assetOutIndex: 2,\\r\\n            amount: 0,\\r\\n            userData: \\\"\\\"\\r\\n        });\\r\\n\\r\\n        address[] memory assets = new address[](3);\\r\\n        assets[0] = address(STARGATE);\\r\\n        assets[1] = USDC;\\r\\n        assets[2] = USDT;\\r\\n\\r\\n        IBalancerVault.FundManagement memory funds = IBalancerVault.FundManagement({\\r\\n            sender: address(this),\\r\\n            fromInternalBalance: false,\\r\\n            recipient: payable(recipient),\\r\\n            toInternalBalance: false\\r\\n        });\\r\\n\\r\\n        int256[] memory limits = new int256[](3);\\r\\n\\r\\n        limits[0] = int256(stgBalance);\\r\\n        limits[1] = 0;\\r\\n        limits[2] = 0;\\r\\n\\r\\n        // STG -> USDT\\r\\n        VAULT.batchSwap(IBalancerVault.SwapKind.GIVEN_IN, swaps, assets, funds, limits, type(uint256).max);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5158d8cfa42a1fc72afa32f7202ab4a42acea6305429e92caefdcf43231bb676\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405163095ea7b360e01b815273ba12222222228d8ba445958a75a0704d566bf2c860048201526000196024820152736694340fc020c5e6b96567843da2df01b2ce1eb69063095ea7b390604401602060405180830381600087803b15801561007957600080fd5b505af115801561008d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100b191906100b7565b506100e0565b6000602082840312156100c957600080fd5b815180151581146100d957600080fd5b9392505050565b61088c806100ef6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063411557d11461005c5780636c34ce881461009357806373460ba7146100a857806389a30271146100c3578063c54e44eb146100de575b600080fd5b61007773ba12222222228d8ba445958a75a0704d566bf2c881565b6040516001600160a01b03909116815260200160405180910390f35b6100a66100a136600461060d565b6100f9565b005b610077736694340fc020c5e6b96567843da2df01b2ce1eb681565b61007773ff970a61a04b1ca14834a43f5de4533ebddb5cc881565b61007773fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb981565b6040516323b872dd60e01b815233600482015230602482015260448101839052736694340fc020c5e6b96567843da2df01b2ce1eb6906323b872dd90606401602060405180830381600087803b15801561015257600080fd5b505af1158015610166573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018a91906105e4565b5060408051600280825260608201909252600091816020015b6101d86040518060a0016040528060008019168152602001600081526020016000815260200160008152602001606081525090565b8152602001906001900390816101a35790505090506040518060a001604052807f3a4c6d2404b5eb14915041e01f63200a82f4a34300020000000000000000006560001b81526020016000815260200160018152602001848152602001604051806020016040528060008152508152508160008151811061025b5761025b61082a565b60200260200101819052506040518060a001604052807f1533a3278f3f9141d5f820a184ea4b017fce238200000000000000000000001660001b815260200160018152602001600281526020016000815260200160405180602001604052806000815250815250816001815181106102d5576102d561082a565b602090810291909101015260408051600380825260808201909252600091816020016020820280368337019050509050736694340fc020c5e6b96567843da2df01b2ce1eb68160008151811061032d5761032d61082a565b60200260200101906001600160a01b031690816001600160a01b03168152505073ff970a61a04b1ca14834a43f5de4533ebddb5cc8816001815181106103755761037561082a565b60200260200101906001600160a01b031690816001600160a01b03168152505073fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9816002815181106103bd576103bd61082a565b6001600160a01b039283166020918202929092018101919091526040805160808082018352308252600093820184905293871681830152606081018390528151600380825294810190925292816020016020820280368337019050509050858160008151811061042f5761042f61082a565b6020026020010181815250506000816001815181106104505761045061082a565b6020026020010181815250506000816002815181106104715761047161082a565b602090810291909101015260405163945bcec960e01b815273ba12222222228d8ba445958a75a0704d566bf2c89063945bcec9906104c0906000908890889088908890600019906004016106bd565b600060405180830381600087803b1580156104da57600080fd5b505af11580156104ee573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610516919081019061051f565b50505050505050565b6000602080838503121561053257600080fd5b825167ffffffffffffffff8082111561054a57600080fd5b818501915085601f83011261055e57600080fd5b81518181111561057057610570610840565b8060051b604051601f19603f8301168101818110858211171561059557610595610840565b604052828152858101935084860182860187018a10156105b457600080fd5b600095505b838610156105d75780518552600195909501949386019386016105b9565b5098975050505050505050565b6000602082840312156105f657600080fd5b8151801515811461060657600080fd5b9392505050565b6000806040838503121561062057600080fd5b8235915060208301356001600160a01b038116811461063e57600080fd5b809150509250929050565b600081518084526020808501945080840160005b838110156106825781516001600160a01b03168752958201959082019060010161065d565b509495945050505050565b600081518084526020808501945080840160005b83811015610682578151875295820195908201906001016106a1565b600061012080830160028a106106e357634e487b7160e01b600052602160045260246000fd5b89845260208085019290925288519081905261014080850192600583901b8601909101918a82016000805b838110156107ac5788860361013f190187528251805187528581015186880152604080820151908801526060808201519088015260809081015160a091880182905280519188018290529083905b8082101561077a5782820188015189830160c001529087019061075c565b8082111561078b578460c0828b0101525b98870198601f01601f19169790970160c0019650509184019160010161070e565b505050505083810360408501526107c38189610649565b915050610803606084018780516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b82810360e0840152610815818661068d565b91505082610100830152979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212204b40465d5b02e177906ac31d0dae1c91f9a57c7144a2eb1277ebee35a00c19be64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063411557d11461005c5780636c34ce881461009357806373460ba7146100a857806389a30271146100c3578063c54e44eb146100de575b600080fd5b61007773ba12222222228d8ba445958a75a0704d566bf2c881565b6040516001600160a01b03909116815260200160405180910390f35b6100a66100a136600461060d565b6100f9565b005b610077736694340fc020c5e6b96567843da2df01b2ce1eb681565b61007773ff970a61a04b1ca14834a43f5de4533ebddb5cc881565b61007773fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb981565b6040516323b872dd60e01b815233600482015230602482015260448101839052736694340fc020c5e6b96567843da2df01b2ce1eb6906323b872dd90606401602060405180830381600087803b15801561015257600080fd5b505af1158015610166573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018a91906105e4565b5060408051600280825260608201909252600091816020015b6101d86040518060a0016040528060008019168152602001600081526020016000815260200160008152602001606081525090565b8152602001906001900390816101a35790505090506040518060a001604052807f3a4c6d2404b5eb14915041e01f63200a82f4a34300020000000000000000006560001b81526020016000815260200160018152602001848152602001604051806020016040528060008152508152508160008151811061025b5761025b61082a565b60200260200101819052506040518060a001604052807f1533a3278f3f9141d5f820a184ea4b017fce238200000000000000000000001660001b815260200160018152602001600281526020016000815260200160405180602001604052806000815250815250816001815181106102d5576102d561082a565b602090810291909101015260408051600380825260808201909252600091816020016020820280368337019050509050736694340fc020c5e6b96567843da2df01b2ce1eb68160008151811061032d5761032d61082a565b60200260200101906001600160a01b031690816001600160a01b03168152505073ff970a61a04b1ca14834a43f5de4533ebddb5cc8816001815181106103755761037561082a565b60200260200101906001600160a01b031690816001600160a01b03168152505073fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9816002815181106103bd576103bd61082a565b6001600160a01b039283166020918202929092018101919091526040805160808082018352308252600093820184905293871681830152606081018390528151600380825294810190925292816020016020820280368337019050509050858160008151811061042f5761042f61082a565b6020026020010181815250506000816001815181106104505761045061082a565b6020026020010181815250506000816002815181106104715761047161082a565b602090810291909101015260405163945bcec960e01b815273ba12222222228d8ba445958a75a0704d566bf2c89063945bcec9906104c0906000908890889088908890600019906004016106bd565b600060405180830381600087803b1580156104da57600080fd5b505af11580156104ee573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610516919081019061051f565b50505050505050565b6000602080838503121561053257600080fd5b825167ffffffffffffffff8082111561054a57600080fd5b818501915085601f83011261055e57600080fd5b81518181111561057057610570610840565b8060051b604051601f19603f8301168101818110858211171561059557610595610840565b604052828152858101935084860182860187018a10156105b457600080fd5b600095505b838610156105d75780518552600195909501949386019386016105b9565b5098975050505050505050565b6000602082840312156105f657600080fd5b8151801515811461060657600080fd5b9392505050565b6000806040838503121561062057600080fd5b8235915060208301356001600160a01b038116811461063e57600080fd5b809150509250929050565b600081518084526020808501945080840160005b838110156106825781516001600160a01b03168752958201959082019060010161065d565b509495945050505050565b600081518084526020808501945080840160005b83811015610682578151875295820195908201906001016106a1565b600061012080830160028a106106e357634e487b7160e01b600052602160045260246000fd5b89845260208085019290925288519081905261014080850192600583901b8601909101918a82016000805b838110156107ac5788860361013f190187528251805187528581015186880152604080820151908801526060808201519088015260809081015160a091880182905280519188018290529083905b8082101561077a5782820188015189830160c001529087019061075c565b8082111561078b578460c0828b0101525b98870198601f01601f19169790970160c0019650509184019160010161070e565b505050505083810360408501526107c38189610649565b915050610803606084018780516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b82810360e0840152610815818661068d565b91505082610100830152979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212204b40465d5b02e177906ac31d0dae1c91f9a57c7144a2eb1277ebee35a00c19be64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}