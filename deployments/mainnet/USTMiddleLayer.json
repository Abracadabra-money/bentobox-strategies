{
  "address": "0x3844A28a5d209A72D57Da62045bc4ac4F4b18BfF",
  "abi": [
    {
      "inputs": [],
      "name": "StrategyWouldAccountLoss",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "YieldNotHighEnough",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UST",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aUST",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accountEarnings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemEarningsImproved",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exchangeRate",
          "type": "uint256"
        }
      ],
      "name": "toAUST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exchangeRate",
          "type": "uint256"
        }
      ],
      "name": "toUST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xbb67337fd0420849dd28fcf63be3046794240e80013d34f5141f83077679df1f",
  "receipt": {
    "to": null,
    "from": "0xfB3485c2e209A5cfBDC1447674256578f1A80eE3",
    "contractAddress": "0x3844A28a5d209A72D57Da62045bc4ac4F4b18BfF",
    "transactionIndex": 279,
    "gasUsed": "620258",
    "logsBloom": "0x
    "blockHash": "0x341bf84ae404fb391ca71ab004e26def5ef9fcbd48ed6945aebaf092a4a2dc2d",
    "transactionHash": "0xbb67337fd0420849dd28fcf63be3046794240e80013d34f5141f83077679df1f",
    "logs": [],
    "blockNumber": 14413369,
    "cumulativeGasUsed": "26391091",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "454c79e86a42dade5e0dc95b7d11f57d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"StrategyWouldAccountLoss\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"YieldNotHighEnough\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UST\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aUST\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemEarningsImproved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"}],\"name\":\"toAUST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"}],\"name\":\"toUST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/helpers/USTMiddleLayer.sol\":\"USTMiddleLayer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\nabstract contract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] -= amount;\\n        }\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n                )\\n            );\\n\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_PERMIT_SIGNATURE\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(bytes(\\\"1\\\")),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x058e0708ffdd2b04a17b96b5775d9fab8daa19d3cd37d26ce6c923679bf9cc9a\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\nlibrary SafeTransferLib {\\n    /*///////////////////////////////////////////////////////////////\\n                            ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(callStatus, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 100 because the calldata length is 4 + 32 * 3.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         INTERNAL HELPER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function didLastOptionalReturnCallSucceed(bool callStatus) private pure returns (bool success) {\\n        assembly {\\n            // Get how many bytes the call returned.\\n            let returnDataSize := returndatasize()\\n\\n            // If the call reverted:\\n            if iszero(callStatus) {\\n                // Copy the revert message into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Revert with the same message.\\n                revert(0, returnDataSize)\\n            }\\n\\n            switch returnDataSize\\n            case 32 {\\n                // Copy the return data into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Set success to whether it returned true.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            case 0 {\\n                // There was no return data.\\n                success := 1\\n            }\\n            default {\\n                // It returned some malformed input.\\n                success := 0\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50f187c86835070ec519acffcc259cd7900fdb85cb53333210fba9491eb65eca\",\"license\":\"AGPL-3.0-only\"},\"contracts/helpers/USTMiddleLayer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// solhint-disable const-name-snakecase\\r\\n\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\r\\nimport \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\r\\nimport \\\"../interfaces/IStrategy.sol\\\";\\r\\nimport \\\"../interfaces/IBentoBoxMinimal.sol\\\";\\r\\n\\r\\ninterface IExchangeRateFeeder {\\r\\n    function exchangeRateOf(address _token, bool _simulate) external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IUSTStrategy {\\r\\n    function feeder() external view returns (IExchangeRateFeeder);\\r\\n\\r\\n    function safeWithdraw(uint256 amount) external;\\r\\n\\r\\n    function safeHarvest(\\r\\n        uint256 maxBalance,\\r\\n        bool rebalance,\\r\\n        uint256 maxChangeAmount,\\r\\n        bool harvestRewards\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ncontract USTMiddleLayer {\\r\\n    using SafeTransferLib for ERC20;\\r\\n\\r\\n    error YieldNotHighEnough();\\r\\n    error StrategyWouldAccountLoss();\\r\\n\\r\\n    ERC20 public constant UST = ERC20(0xa47c8bf37f92aBed4A126BDA807A7b7498661acD);\\r\\n    ERC20 public constant aUST = ERC20(0xa8De3e3c934e2A1BB08B010104CcaBBD4D6293ab);\\r\\n    IUSTStrategy private constant strategy = IUSTStrategy(0xE6191aA754F9a881e0a73F2028eDF324242F39E2);\\r\\n    IBentoBoxMinimal private constant bentoBox = IBentoBoxMinimal(0xd96f48665a1410C0cd669A88898ecA36B9Fc2cce);\\r\\n\\r\\n    function accountEarnings() external {\\r\\n        uint256 balanceToKeep = IBentoBoxMinimal(bentoBox).strategyData(address(UST)).balance;\\r\\n        uint256 exchangeRate = strategy.feeder().exchangeRateOf(address(UST), true);\\r\\n        uint256 liquid = UST.balanceOf(address(strategy));\\r\\n        uint256 total = toUST(aUST.balanceOf(address(strategy)), exchangeRate) + liquid;\\r\\n\\r\\n        if (total <= balanceToKeep) {\\r\\n            revert StrategyWouldAccountLoss();\\r\\n        }\\r\\n\\r\\n        if (liquid <= 100 ether) {\\r\\n            revert YieldNotHighEnough();\\r\\n        }\\r\\n\\r\\n        strategy.safeHarvest(type(uint256).max, false, type(uint256).max, false);\\r\\n    }\\r\\n\\r\\n    function redeemEarningsImproved() external {\\r\\n        uint256 balanceToKeep = IBentoBoxMinimal(bentoBox).strategyData(address(UST)).balance;\\r\\n        uint256 exchangeRate = strategy.feeder().exchangeRateOf(address(UST), true);\\r\\n        uint256 liquid = UST.balanceOf(address(strategy));\\r\\n        uint256 total = toUST(aUST.balanceOf(address(strategy)), exchangeRate) + liquid;\\r\\n\\r\\n        if (total <= balanceToKeep) {\\r\\n            revert StrategyWouldAccountLoss();\\r\\n        }\\r\\n\\r\\n        if (total - balanceToKeep <= 100 ether) {\\r\\n            revert YieldNotHighEnough();\\r\\n        }\\r\\n\\r\\n        strategy.safeWithdraw(total - balanceToKeep - liquid);\\r\\n    }\\r\\n\\r\\n    function toUST(uint256 amount, uint256 exchangeRate) public pure returns (uint256) {\\r\\n        return (amount * exchangeRate) / 1e18;\\r\\n    }\\r\\n\\r\\n    function toAUST(uint256 amount, uint256 exchangeRate) public pure returns (uint256) {\\r\\n        return (amount * 1e18) / exchangeRate;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7cfb9b140e7de16b9ddf642cf0ed02d3bf68bb9fb336c5c1a958b019ee998d04\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBentoBoxMinimal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n/// @notice Minimal interface for BentoBox token vault interactions - `token` is aliased as `address` from `IERC20` for code simplicity.\\r\\ninterface IBentoBoxMinimal {\\r\\n\\r\\n    struct Rebase {\\r\\n        uint128 elastic;\\r\\n        uint128 base;\\r\\n    }\\r\\n\\r\\n    struct StrategyData {\\r\\n        uint64 strategyStartDate;\\r\\n        uint64 targetPercentage;\\r\\n        uint128 balance; // the balance of the strategy that BentoBox thinks is in there\\r\\n    }\\r\\n\\r\\n    function strategyData(address token) external view returns (StrategyData memory);\\r\\n\\r\\n    /// @notice Balance per ERC-20 token per account in shares.\\r\\n    function balanceOf(address, address) external view returns (uint256);\\r\\n\\r\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\r\\n    /// @param token_ The ERC-20 token to deposit.\\r\\n    /// @param from which account to pull the tokens.\\r\\n    /// @param to which account to push the tokens.\\r\\n    /// @param amount Token amount in native representation to deposit.\\r\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\r\\n    /// @return amountOut The amount deposited.\\r\\n    /// @return shareOut The deposited amount repesented in shares.\\r\\n    function deposit(\\r\\n        address token_,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 share\\r\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\r\\n\\r\\n    /// @notice Withdraws an amount of `token` from a user account.\\r\\n    /// @param token_ The ERC-20 token to withdraw.\\r\\n    /// @param from which user to pull the tokens.\\r\\n    /// @param to which user to push the tokens.\\r\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\r\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\r\\n    function withdraw(\\r\\n        address token_,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 share\\r\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\r\\n\\r\\n    /// @notice Transfer shares from a user account to another one.\\r\\n    /// @param token The ERC-20 token to transfer.\\r\\n    /// @param from which user to pull the tokens.\\r\\n    /// @param to which user to push the tokens.\\r\\n    /// @param share The amount of `token` in shares.\\r\\n    function transfer(\\r\\n        address token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 share\\r\\n    ) external;\\r\\n\\r\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\r\\n    /// @param token The ERC-20 token.\\r\\n    /// @param amount The `token` amount.\\r\\n    /// @param roundUp If the result `share` should be rounded up.\\r\\n    /// @return share The token amount represented in shares.\\r\\n    function toShare(\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        bool roundUp\\r\\n    ) external view returns (uint256 share);\\r\\n\\r\\n    /// @dev Helper function to represent shares back into the `token` amount.\\r\\n    /// @param token The ERC-20 token.\\r\\n    /// @param share The amount of shares.\\r\\n    /// @param roundUp If the result should be rounded up.\\r\\n    /// @return amount The share amount back into native representation.\\r\\n    function toAmount(\\r\\n        address token,\\r\\n        uint256 share,\\r\\n        bool roundUp\\r\\n    ) external view returns (uint256 amount);\\r\\n\\r\\n    /// @notice Registers this contract so that users can approve it for the BentoBox.\\r\\n    function registerProtocol() external;\\r\\n\\r\\n    function totals(address token) external view returns (Rebase memory);\\r\\n\\r\\n    function harvest(\\r\\n        address token,\\r\\n        bool balance,\\r\\n        uint256 maxChangeAmount\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xeb3c66b5c143833c7b49a76ed2f88c9815f7e77993450179c8cd616dc75f4556\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity 0.8.7;\\r\\n\\r\\ninterface IStrategy {\\r\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\r\\n    /// @param amount The amount of tokens to invest.\\r\\n    function skim(uint256 amount) external;\\r\\n\\r\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\r\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\r\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\r\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\r\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\r\\n\\r\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\r\\n    /// @dev The `actualAmount` should be very close to the amount.\\r\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\r\\n    /// @param amount The requested amount the caller wants to withdraw.\\r\\n    /// @return actualAmount The real amount that is withdrawn.\\r\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\r\\n\\r\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\r\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\r\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\r\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\r\\n}\\r\\n\",\"keccak256\":\"0x78124cec79b353649c003f761d4975c90a63c5e91a33f5eea296dfc14a7fd172\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610a43806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063066f80cd14610067578063140f165d1461009f57806341e728a0146100c05780634e882492146100ca5780635a2ac62d146100d2578063e7ec9f30146100e5575b600080fd5b61008273a8de3e3c934e2a1bb08b010104ccabbd4d6293ab81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b26100ad366004610965565b610100565b604051908152602001610096565b6100c8610126565b005b6100c8610508565b6100b26100e0366004610965565b610869565b61008273a47c8bf37f92abed4a126bda807a7b7498661acd81565b60008161011584670de0b6b3a76400006109c1565b61011f919061099f565b9392505050565b60405163df23b45b60e01b815273a47c8bf37f92abed4a126bda807a7b7498661acd600482015260009073d96f48665a1410c0cd669a88898eca36b9fc2cce9063df23b45b9060240160606040518083038186803b15801561018757600080fd5b505afa15801561019b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101bf91906108c4565b604001516001600160801b03169050600073e6191aa754f9a881e0a73f2028edf324242f39e26001600160a01b031663a788a7166040518163ffffffff1660e01b815260040160206040518083038186803b15801561021d57600080fd5b505afa158015610231573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610255919061089b565b60405163cdd2193960e01b815273a47c8bf37f92abed4a126bda807a7b7498661acd6004820152600160248201526001600160a01b03919091169063cdd219399060440160206040518083038186803b1580156102b157600080fd5b505afa1580156102c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e9919061094c565b6040516370a0823160e01b815273e6191aa754f9a881e0a73f2028edf324242f39e2600482015290915060009073a47c8bf37f92abed4a126bda807a7b7498661acd906370a082319060240160206040518083038186803b15801561034d57600080fd5b505afa158015610361573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610385919061094c565b6040516370a0823160e01b815273e6191aa754f9a881e0a73f2028edf324242f39e26004820152909150600090829061042e9073a8de3e3c934e2a1bb08b010104ccabbd4d6293ab906370a08231906024015b60206040518083038186803b1580156103f057600080fd5b505afa158015610404573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610428919061094c565b85610869565b6104389190610987565b905083811161045a57604051634562846960e11b815260040160405180910390fd5b68056bc75e2d63100000821161048357604051631f77f53360e11b815260040160405180910390fd5b60405163ba6275ab60e01b8152600019600482018190526000602483018190526044830191909152606482015273e6191aa754f9a881e0a73f2028edf324242f39e29063ba6275ab906084015b600060405180830381600087803b1580156104ea57600080fd5b505af11580156104fe573d6000803e3d6000fd5b5050505050505050565b60405163df23b45b60e01b815273a47c8bf37f92abed4a126bda807a7b7498661acd600482015260009073d96f48665a1410c0cd669a88898eca36b9fc2cce9063df23b45b9060240160606040518083038186803b15801561056957600080fd5b505afa15801561057d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a191906108c4565b604001516001600160801b03169050600073e6191aa754f9a881e0a73f2028edf324242f39e26001600160a01b031663a788a7166040518163ffffffff1660e01b815260040160206040518083038186803b1580156105ff57600080fd5b505afa158015610613573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610637919061089b565b60405163cdd2193960e01b815273a47c8bf37f92abed4a126bda807a7b7498661acd6004820152600160248201526001600160a01b03919091169063cdd219399060440160206040518083038186803b15801561069357600080fd5b505afa1580156106a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cb919061094c565b6040516370a0823160e01b815273e6191aa754f9a881e0a73f2028edf324242f39e2600482015290915060009073a47c8bf37f92abed4a126bda807a7b7498661acd906370a082319060240160206040518083038186803b15801561072f57600080fd5b505afa158015610743573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610767919061094c565b6040516370a0823160e01b815273e6191aa754f9a881e0a73f2028edf324242f39e2600482015290915060009082906107be9073a8de3e3c934e2a1bb08b010104ccabbd4d6293ab906370a08231906024016103d8565b6107c89190610987565b90508381116107ea57604051634562846960e11b815260040160405180910390fd5b68056bc75e2d631000006107fe85836109e0565b1161081c57604051631f77f53360e11b815260040160405180910390fd5b73e6191aa754f9a881e0a73f2028edf324242f39e263b0fd035b8361084187856109e0565b61084b91906109e0565b6040518263ffffffff1660e01b81526004016104d091815260200190565b6000670de0b6b3a764000061011583856109c1565b805167ffffffffffffffff8116811461089657600080fd5b919050565b6000602082840312156108ad57600080fd5b81516001600160a01b038116811461011f57600080fd5b6000606082840312156108d657600080fd5b6040516060810181811067ffffffffffffffff8211171561090757634e487b7160e01b600052604160045260246000fd5b6040526109138361087e565b81526109216020840161087e565b602082015260408301516001600160801b038116811461094057600080fd5b60408201529392505050565b60006020828403121561095e57600080fd5b5051919050565b6000806040838503121561097857600080fd5b50508035926020909101359150565b6000821982111561099a5761099a6109f7565b500190565b6000826109bc57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156109db576109db6109f7565b500290565b6000828210156109f2576109f26109f7565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220ea5a06622f6c8234a2e88bc7655dc1ff509c00ae20309ef2e76c7ead5151fdb064736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063066f80cd14610067578063140f165d1461009f57806341e728a0146100c05780634e882492146100ca5780635a2ac62d146100d2578063e7ec9f30146100e5575b600080fd5b61008273a8de3e3c934e2a1bb08b010104ccabbd4d6293ab81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b26100ad366004610965565b610100565b604051908152602001610096565b6100c8610126565b005b6100c8610508565b6100b26100e0366004610965565b610869565b61008273a47c8bf37f92abed4a126bda807a7b7498661acd81565b60008161011584670de0b6b3a76400006109c1565b61011f919061099f565b9392505050565b60405163df23b45b60e01b815273a47c8bf37f92abed4a126bda807a7b7498661acd600482015260009073d96f48665a1410c0cd669a88898eca36b9fc2cce9063df23b45b9060240160606040518083038186803b15801561018757600080fd5b505afa15801561019b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101bf91906108c4565b604001516001600160801b03169050600073e6191aa754f9a881e0a73f2028edf324242f39e26001600160a01b031663a788a7166040518163ffffffff1660e01b815260040160206040518083038186803b15801561021d57600080fd5b505afa158015610231573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610255919061089b565b60405163cdd2193960e01b815273a47c8bf37f92abed4a126bda807a7b7498661acd6004820152600160248201526001600160a01b03919091169063cdd219399060440160206040518083038186803b1580156102b157600080fd5b505afa1580156102c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e9919061094c565b6040516370a0823160e01b815273e6191aa754f9a881e0a73f2028edf324242f39e2600482015290915060009073a47c8bf37f92abed4a126bda807a7b7498661acd906370a082319060240160206040518083038186803b15801561034d57600080fd5b505afa158015610361573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610385919061094c565b6040516370a0823160e01b815273e6191aa754f9a881e0a73f2028edf324242f39e26004820152909150600090829061042e9073a8de3e3c934e2a1bb08b010104ccabbd4d6293ab906370a08231906024015b60206040518083038186803b1580156103f057600080fd5b505afa158015610404573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610428919061094c565b85610869565b6104389190610987565b905083811161045a57604051634562846960e11b815260040160405180910390fd5b68056bc75e2d63100000821161048357604051631f77f53360e11b815260040160405180910390fd5b60405163ba6275ab60e01b8152600019600482018190526000602483018190526044830191909152606482015273e6191aa754f9a881e0a73f2028edf324242f39e29063ba6275ab906084015b600060405180830381600087803b1580156104ea57600080fd5b505af11580156104fe573d6000803e3d6000fd5b5050505050505050565b60405163df23b45b60e01b815273a47c8bf37f92abed4a126bda807a7b7498661acd600482015260009073d96f48665a1410c0cd669a88898eca36b9fc2cce9063df23b45b9060240160606040518083038186803b15801561056957600080fd5b505afa15801561057d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a191906108c4565b604001516001600160801b03169050600073e6191aa754f9a881e0a73f2028edf324242f39e26001600160a01b031663a788a7166040518163ffffffff1660e01b815260040160206040518083038186803b1580156105ff57600080fd5b505afa158015610613573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610637919061089b565b60405163cdd2193960e01b815273a47c8bf37f92abed4a126bda807a7b7498661acd6004820152600160248201526001600160a01b03919091169063cdd219399060440160206040518083038186803b15801561069357600080fd5b505afa1580156106a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cb919061094c565b6040516370a0823160e01b815273e6191aa754f9a881e0a73f2028edf324242f39e2600482015290915060009073a47c8bf37f92abed4a126bda807a7b7498661acd906370a082319060240160206040518083038186803b15801561072f57600080fd5b505afa158015610743573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610767919061094c565b6040516370a0823160e01b815273e6191aa754f9a881e0a73f2028edf324242f39e2600482015290915060009082906107be9073a8de3e3c934e2a1bb08b010104ccabbd4d6293ab906370a08231906024016103d8565b6107c89190610987565b90508381116107ea57604051634562846960e11b815260040160405180910390fd5b68056bc75e2d631000006107fe85836109e0565b1161081c57604051631f77f53360e11b815260040160405180910390fd5b73e6191aa754f9a881e0a73f2028edf324242f39e263b0fd035b8361084187856109e0565b61084b91906109e0565b6040518263ffffffff1660e01b81526004016104d091815260200190565b6000670de0b6b3a764000061011583856109c1565b805167ffffffffffffffff8116811461089657600080fd5b919050565b6000602082840312156108ad57600080fd5b81516001600160a01b038116811461011f57600080fd5b6000606082840312156108d657600080fd5b6040516060810181811067ffffffffffffffff8211171561090757634e487b7160e01b600052604160045260246000fd5b6040526109138361087e565b81526109216020840161087e565b602082015260408301516001600160801b038116811461094057600080fd5b60408201529392505050565b60006020828403121561095e57600080fd5b5051919050565b6000806040838503121561097857600080fd5b50508035926020909101359150565b6000821982111561099a5761099a6109f7565b500190565b6000826109bc57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156109db576109db6109f7565b500290565b6000828210156109f2576109f26109f7565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220ea5a06622f6c8234a2e88bc7655dc1ff509c00ae20309ef2e76c7ead5151fdb064736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}